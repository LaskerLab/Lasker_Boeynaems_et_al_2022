%{
Keren Lasker
May, 2020
%}



function [signal_distribution_popz,signal_distribution_chpt] = 
run_analysis_for_linker_two_channels(name,data, ...
                                     background_popz, ...
                                     background_chpt, ...
                                     threshold, ...
                                     max_len,...
                                     resampling_grid_size, ...
                                     popz_ch_id, chpt_ch_id)
%{                                           
run_analysis_for_linker
name: Linker name
data: The analysis file as generated by MicrobeJ
background: Background value for the fluorescence channel
threshold: Ignore the cell if its max bin intensity (after background
substraction) is lower than the threshold
max_len:ignore cells of length longer than max_len
resampling_grid_size: Number of bins in the unified grid    
popz_ch_id: which channel to use. Use this channel to decide on polarity.
chpt_ch_id: client channel

%}
 
                                                
shuffle = @(a)a(randperm(numel(a)));

all_shapes = cell2mat(extractfield(data,'SHAPE'));
all_lengths = [all_shapes(:).length]';

aa=extractfield(data,'PROFILE_MED');
num_cells = length(aa);
sizes=zeros(num_cells,1);
for i=1:num_cells
    sizes(i)=size(data(i).PROFILE_MED.ch(popz_ch_id).pixel,1);
end
max_cell_length = max(sizes);
min_cell_length = min(sizes);

%data_resampled1=zeros(min_cell_length-1,num_cells);

data_resampled_ch1=zeros(resampling_grid_size,num_cells);
data_resampled_ch2=zeros(resampling_grid_size,num_cells);
cur_ind=1;
for i=1:num_cells
    
    x1=mean(aa{1,i}.ch(popz_ch_id).pixel-background_popz,2);
    x2=mean(aa{1,i}.ch(chpt_ch_id).pixel-background_,2);
    if min(x1)<0
        continue
    end
    if max(x1)<threshold
        continue
    end
    if size(aa{1,i}.ch(ch_id).pixel,1)<resampling_grid_size
        continue
    end
    
    if all_lengths(i)>max_len
        continue
    end
    
    
    
    %data_(:,i) = padarray(x,[max_cell_length-size(x,1)],'post');
    rdata = resample(x,resampling_grid_size,size(x,1));
    if sum(rdata(1:5)) < sum(rdata(end-5:end))
        rdata = flip(rdata);
    end
    data_resampled_ch1(:,cur_ind) = rdata;
    cur_ind=cur_ind+1;
end
data_resampled = data_resampled1(:,any(data_resampled1 ~= 0,1));
signal_distribution = data_resampled./sum(data_resampled,1);
%signal_distribution = shuffle(signal_distribution);
end

